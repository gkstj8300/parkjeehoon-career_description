/* stylelint-disable order/order */
@use 'sass:map';
@use 'sass:math';

@function opposite-direction($directions) {
	$opposite-directions: ();
	$direction-map: (
		'top': 'bottom',
		'right': 'left',
		'bottom': 'top',
		'left': 'right',
		'center': 'center',
	);

	@each $direction in $directions {
		$direction: to-lower-case($direction);

		@if map-has-key($direction-map, $direction) {
			$opposite-directions: append(
				$opposite-directions,
				unquote(map-get($direction-map, $direction))
			);
		} @else {
			@warn "No opposite direction can be found for `#{$direction}`. Direction omitted.";
		}
	}

	@return $opposite-directions;
}

@mixin color($colors) {
	color: map-get($colors, text);
	background-color: map-get($colors, background);
}

@mixin triangle($width, $height, $direction, $color: currentColor) {

	$perpendicular-border: math.div($width, 2) solid transparent;
    
	@if index(top bottom, $direction) {
		border-right: $perpendicular-border;
		border-left: $perpendicular-border;
	} @else if index(right left, $direction) {
		border-top: $perpendicular-border;
		border-bottom: $perpendicular-border;
	}

	width: 0;
	height: 0;
	border-style: solid;
	border-#{opposite-direction($direction)}: $height solid $color;
	border-#{$direction}: none;
}

@mixin tail-position($direction, $height, $position: center) {
	$position-map: (
		near: 20%,
		center: 50%,
		far: 80%,
	);
	$axis: if(index(top bottom, $direction), x, y);

	position: absolute;
	transform: translate#{$axis }(-50%);
	@if index(top bottom, $direction) {
		left: map-get($position-map, $position);
	} @else if index(left right, $direction) {
		top: map-get($position-map, $position);
	}

	#{$direction}: -$height;
}

@mixin balloon-tail-darkArrow(
	$direction: top,
	$color: currentColor,
	$border: null,
	$width: 10px,
	$height: 10px,
	$position: center
) {

	@if $border != null {
		&::before {
			@include tail-position($direction, $height, $position);
			@include triangle($width, $height, $direction, map-get($border, color));

			bottom: -9px;
			color: #333;
			content: '';
		}
	}

	@if $border == null {
		&::after {
			@include tail-position($direction, $height - $borderWidth, $position);
			@include triangle($width, $height, $direction, $color);

			color: #333;
			content: '';
		}
	}
	$borderWidth: if(
		$border != null,
		if(map-has-key($border, width), map-get($border, width), 1),
		0
	);
}

@mixin balloon-tail(
	$direction: top,
	$color: currentColor,
	$border: null,
	$width: 10px,
	$height: 10px,
	$position: center
) {

	@if $border != null {
		&::before {
			@include tail-position($direction, $height, $position);
			@include triangle($width, $height, $direction, map-get($border, color));

			content: '';
		}
	}

	@if $border == null {
		&::after {
			@include tail-position($direction, $height - $borderWidth, $position);
			@include triangle($width, $height, $direction, $color);

			content: '';
		}
	}
	$borderWidth: if(
		$border != null,
		if(map-has-key($border, width), map-get($border, width), 1),
		0
	);
}

$tooltipColorThemes: (
	dark: (
		background: #333,
		color: #fff,
		lineHeight: 1.1,
		width: 10px,
		height: 5px,
		maxWidth: 200px,
		padding: 7px,
	),
	darkArrow: (
		background: #333,
		color: #fff,
		lineHeight: 1.5,
		width: 10px,
		height: 10px,
		maxWidth: 220px,
		padding: 7px,
	),
	light: (
		background: #e5e5e5,
		color: #333,
		shadow: 0 0 8px rgb(0 0 0 / 0.2),
		textAlign: center,
		lineHeight: 1.5,
		width: 12px,
		height: 10px,
		maxWidth: 185px,
		padding: 8px,
	),
	light-2: (
		background: #fff,
		color: #333,
		shadow: 0 0 8px rgb(0 0 0 / 0.2),
		lineHeight: 1.5,
		width: 12px,
		height: 10px,
		maxWidth: 150px,
		padding: 8px,
	),
	blue-border: (
		background: #fff,
		border-style: solid,
		border-color: #004098,
		border-width: 1px,
		color: #333,
		shadow: 0 0 8px rgb(0 0 0 / 0.2),
		lineHeight: 1.5,
		width: 12px,
		height: 10px,
		maxWidth: 220px,
		padding: 8px,
	),
);

@keyframes fade-in {
	from {
		opacity: 0;
	}

	to {
		opacity: 1;
	}
}

.tooltip {
	@each $direction in (top, right, bottom, left) {
		@each $property, $currentTheme in $tooltipColorThemes {
			&[data-theme='#{$property}'] {
				max-width: map-get($currentTheme, 'maxWidth');
				padding: map-get($currentTheme, 'padding');
				color: map-get($currentTheme, 'color');
				line-height: map-get($currentTheme, 'lineHeight');
				text-align: map-get($currentTheme, 'textAlign');
				background-color: map-get($currentTheme, 'background');
				border-width: map-get($currentTheme, 'border-width');
				border-style: map-get($currentTheme, 'border-style');
				border-color: map-get($currentTheme, 'border-color');
				box-shadow: map-get($currentTheme, 'shadow');
			}

			&[data-direction='#{$direction}'][data-theme='#{$property}'] {
				@if $property == darkArrow {
					@include balloon-tail-darkArrow(
						$direction,
						$border: (
							width: map-get($currentTheme, '0'),
							color: map-get($currentTheme, 'border-color')
						),
						$color: map-get($currentTheme, 'color'),
						$width: map-get($currentTheme, 'width'),
						$height: map-get($currentTheme, 'height')
					);
				}
				@if $property != darkArrow {
					@include balloon-tail(
						$direction,
						$border: (
							width: map-get($currentTheme, 'border-width'),
							color: map-get($currentTheme, 'border-color')
						),
						$color: map-get($currentTheme, 'background'),
						$width: map-get($currentTheme, 'width'),
						$height: map-get($currentTheme, 'height')
					);
				}
			}
		}
	}

	position: fixed;
	z-index: 500;
	border-radius: 4px;
	animation: fade-in 0.2s;
}